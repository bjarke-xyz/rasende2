// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: fakenews.sql

package dao

import (
	"context"
	"database/sql"
)

const getAllFakeNews = `-- name: GetAllFakeNews :many
SELECT site_name, title, content, published, site_id, img_url, highlighted, votes, external_id FROM fake_news
`

func (q *Queries) GetAllFakeNews(ctx context.Context) ([]FakeNews, error) {
	rows, err := q.db.QueryContext(ctx, getAllFakeNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FakeNews
	for rows.Next() {
		var i FakeNews
		if err := rows.Scan(
			&i.SiteName,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.SiteID,
			&i.ImgUrl,
			&i.Highlighted,
			&i.Votes,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setFakeNewsExternalId = `-- name: SetFakeNewsExternalId :exec
UPDATE fake_news SET external_id = ? WHERE site_id = ? AND title = ?
`

type SetFakeNewsExternalIdParams struct {
	ExternalID sql.NullString `json:"external_id"`
	SiteID     sql.NullInt64  `json:"site_id"`
	Title      string         `json:"title"`
}

func (q *Queries) SetFakeNewsExternalId(ctx context.Context, arg SetFakeNewsExternalIdParams) error {
	_, err := q.db.ExecContext(ctx, setFakeNewsExternalId, arg.ExternalID, arg.SiteID, arg.Title)
	return err
}
