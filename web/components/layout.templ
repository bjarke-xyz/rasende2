package components

import "fmt"

type BaseOpenGraphModel struct {
	Title string
	// Type  string
	Image       string
	Url         string
	Description string
}

type BaseViewModel struct {
	Path          string
	UnixBuildTime int64
	Title         string
	OpenGraph     *BaseOpenGraphModel
	IncludeLayout bool
}

templ Layout(viewModel BaseViewModel, children ...templ.Component) {
	if (viewModel.IncludeLayout) {
		<!DOCTYPE html>
		<html lang="en">
			<head>
				<meta charset="UTF-8"/>
				<meta name="viewport" content="width=device-width, initial-scale=1"/>
				<title>{ viewModel.Title }</title>
				<link href={ fmt.Sprintf("/static/css/tailwind.css?v=%v", viewModel.UnixBuildTime) } rel="stylesheet"/>
				<script src={ fmt.Sprintf("/static/js/ready.js?v=%v", viewModel.UnixBuildTime) }></script>
				<script src={ fmt.Sprintf("/static/js/vendor/chart.umd.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/vendor/htmx.min.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/vendor/sse.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/main.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				if viewModel.OpenGraph != nil {
					@openGraph(*viewModel.OpenGraph)
				}
			</head>
			<body class="bg-white text-slate-900 dark:bg-slate-800 dark:text-white">
				<div class="h-screen flex flex-col">
					@header(viewModel.Path)
					<div class="mb-auto mt-10">
						for _, child := range children {
							@child
						}
					</div>
					@footer()
				</div>
			</body>
		</html>
	} else {
		for _, child := range children {
			@child
		}
	}
}

templ headerLink(currentPath string, linkPath string, text string) {
	if currentPath == linkPath {
		<a class="font-bold" href={ templ.URL(linkPath) }>{ text }</a>
	} else {
		<a href={ templ.URL(linkPath) }>{ text }</a>
	}
}

templ header(path string) {
	<div class="flex flex-col items-center py-2">
		<div class="flex flex-row space-x-4">
			<div>
				@headerLink(path, "/", "Rasende")
			</div>
			<div>
				@headerLink(path, "/search", "SÃ¸g")
			</div>
			<div>
				@headerLink(path, "/fake-news", "Fake News")
			</div>
		</div>
	</div>
}

templ footer() {
	<footer class="p-2">
		<div class="flex flex-row justify-around text-sm"></div>
	</footer>
}

templ openGraph(model BaseOpenGraphModel) {
	<meta property="og:title" content={ model.Title }/>
	<meta property="og:type" content="website"/>
	<meta property="og:image" content={ model.Image }/>
	<meta property="og:url" content={ model.Url }/>
	<meta property="og:description" content={ model.Description }/>
}
