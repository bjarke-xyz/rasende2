package components

import (
	"fmt"
	"github.com/bjarke-xyz/rasende2/ginutils"
)

type BaseOpenGraphModel struct {
	Title string
	// Type  string
	Image       string
	Url         string
	Description string
}

type BaseViewModel struct {
	Path          string
	UnixBuildTime int64
	Title         string
	OpenGraph     *BaseOpenGraphModel
	IncludeLayout bool
	FlashInfo     []string
	FlashWarn     []string
	FlashError    []string
	NoCache       bool
	IsAdmin       bool
}

templ Layout(viewModel BaseViewModel, children ...templ.Component) {
	if (viewModel.IncludeLayout) {
		<!DOCTYPE html>
		<html lang="en">
			<head>
				<meta charset="UTF-8"/>
				<meta name="viewport" content="width=device-width, initial-scale=1"/>
				<title>{ viewModel.Title }</title>
				<link href={ fmt.Sprintf("/static/css/tailwind.css?v=%v", viewModel.UnixBuildTime) } rel="stylesheet"/>
				<script src={ fmt.Sprintf("/static/js/ready.js?v=%v", viewModel.UnixBuildTime) }></script>
				<script src={ fmt.Sprintf("/static/js/vendor/chart.umd.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/vendor/htmx.min.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/vendor/sse.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				<script src={ fmt.Sprintf("/static/js/main.js?v=%v", viewModel.UnixBuildTime) } defer></script>
				if viewModel.OpenGraph != nil {
					@openGraph(*viewModel.OpenGraph)
				}
			</head>
			<body class="bg-white text-slate-900 dark:bg-slate-800 dark:text-white">
				<div class="h-screen flex flex-col">
					@header(viewModel.Path)
					<div class="mb-auto mt-10">
						if len(viewModel.FlashError) > 0 {
							@flash(ginutils.FlashTypeError, viewModel.FlashError)
						}
						if len(viewModel.FlashWarn) > 0 {
							@flash(ginutils.FlashTypeWarn, viewModel.FlashWarn)
						}
						if len(viewModel.FlashInfo) > 0 {
							@flash(ginutils.FlashTypeInfo, viewModel.FlashInfo)
						}
						for _, child := range children {
							@child
						}
					</div>
					@footer(viewModel)
				</div>
			</body>
		</html>
	} else {
		for _, child := range children {
			@child
		}
	}
}

templ headerLink(currentPath string, linkPath string, text string) {
	if currentPath == linkPath {
		<a class="font-bold" href={ templ.URL(linkPath) }>{ text }</a>
	} else {
		<a href={ templ.URL(linkPath) }>{ text }</a>
	}
}

templ header(path string) {
	<div class="flex flex-col items-center py-2">
		<div class="flex flex-row space-x-4">
			<div>
				@headerLink(path, "/", "Rasende")
			</div>
			<div>
				@headerLink(path, "/search", "SÃ¸g")
			</div>
			<div>
				@headerLink(path, "/fake-news", "Fake News")
			</div>
		</div>
	</div>
}

templ footer(model BaseViewModel) {
	<footer class="p-2">
		<div class="flex flex-row justify-end text-sm">
			if model.IsAdmin {
				<form method="POST" action="/logout">
					<button class="btn-primary">Logout</button>
				</form>
			}
		</div>
	</footer>
}

templ openGraph(model BaseOpenGraphModel) {
	<meta property="og:title" content={ model.Title }/>
	<meta property="og:type" content="website"/>
	<meta property="og:image" content={ model.Image }/>
	<meta property="og:url" content={ model.Url }/>
	<meta property="og:description" content={ model.Description }/>
}

var flashScriptHandle = templ.NewOnceHandle()

templ flash(flashType string, msgs []string) {
	@flashScriptHandle.Once() {
		<script>
		function handleFlashClick(elem) {
			const flashContainer = elem.parentElement;
			flashContainer?.remove();
		}
		</script>
	}
	// TODO: 
	// <div onclick="handleFlashClick(this)" class={ "p-8 m-4 rounded-md text-slate-900 ", templ.KV("bg-red-200", flashType == ginutils.FlashTypeError), templ.KV("bg-yellow-200", flashType == ginutils.FlashTypeWarn), templ.KV("bg-blue-200", flashType == ginutils.FlashTypeInfo) }>
	// 	for _, msg := range msgs {
	// 		<p>
	// 			{ msg }
	// 		</p>
	// 	}
	// </div>
	<div class={ "relative p-8 m-4 rounded-md text-slate-900 ", templ.KV("bg-red-200", flashType == ginutils.FlashTypeError), templ.KV("bg-yellow-200", flashType == ginutils.FlashTypeWarn), templ.KV("bg-blue-200", flashType == ginutils.FlashTypeInfo) }>
		<button onclick="handleFlashClick(this)" onclick="this.parentElement.style.display='none';" class="absolute top-2 right-2 text-slate-900">
			&times;
		</button>
		for _, msg := range msgs {
			<p>
				{ msg }
			</p>
		}
	</div>
}
