// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createMagicLink = `-- name: CreateMagicLink :exec
INSERT INTO magic_links (user_id, otp_hash, link_code, expires_at) VALUES (?, ?, ?, ?)
`

type CreateMagicLinkParams struct {
	UserID    int64     `json:"user_id"`
	OtpHash   string    `json:"otp_hash"`
	LinkCode  string    `json:"link_code"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateMagicLink(ctx context.Context, arg CreateMagicLinkParams) error {
	_, err := q.db.ExecContext(ctx, createMagicLink,
		arg.UserID,
		arg.OtpHash,
		arg.LinkCode,
		arg.ExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash) VALUES (?, ?) RETURNING id, created_at, updated_at, email, email_confirmed, password_hash, is_admin
`

type CreateUserParams struct {
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailConfirmed,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const deleteExpiredMagicLinks = `-- name: DeleteExpiredMagicLinks :exec
DELETE FROM magic_links WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredMagicLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredMagicLinks)
	return err
}

const deleteMagicLink = `-- name: DeleteMagicLink :exec
DELETE FROM magic_links 
WHERE id = ?
`

func (q *Queries) DeleteMagicLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMagicLink, id)
	return err
}

const getLinkByCode = `-- name: GetLinkByCode :one
SELECT id, created_at, updated_at, user_id, otp_hash, link_code, expires_at FROM magic_links
WHERE link_code = ? LIMIT 1
`

func (q *Queries) GetLinkByCode(ctx context.Context, linkCode string) (MagicLink, error) {
	row := q.db.QueryRowContext(ctx, getLinkByCode, linkCode)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.OtpHash,
		&i.LinkCode,
		&i.ExpiresAt,
	)
	return i, err
}

const getLinksByUserId = `-- name: GetLinksByUserId :many
SELECT id, created_at, updated_at, user_id, otp_hash, link_code, expires_at FROM magic_links
WHERE user_id = ? AND expires_at >= CURRENT_TIMESTAMP
`

func (q *Queries) GetLinksByUserId(ctx context.Context, userID int64) ([]MagicLink, error) {
	rows, err := q.db.QueryContext(ctx, getLinksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MagicLink
	for rows.Next() {
		var i MagicLink
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.OtpHash,
			&i.LinkCode,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, email_confirmed, password_hash, is_admin FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailConfirmed,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, email_confirmed, password_hash, is_admin FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailConfirmed,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const setUserEmailConfirmed = `-- name: SetUserEmailConfirmed :exec
UPDATE users SET email_confirmed = 1, updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND email_confirmed = 0
`

func (q *Queries) SetUserEmailConfirmed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setUserEmailConfirmed, id)
	return err
}
